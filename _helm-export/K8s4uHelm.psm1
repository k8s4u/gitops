Function Get-K8s4uHelmChart {
    <#
    .SYNOPSIS
        Get latest version of Helm chart

    .PARAMETER Url
        Chart index URL

    .PARAMETER Name
        Chart name

    .PARAMETER TargetFolder
        Folder to exract Helm chart

    .EXAMPLE
        $chartFolder="$env:TEMP\traefik-$(Get-Date -Format yyyyMMddHHmm)"
        Get-K8s4uHelmChart -Url "https://helm.traefik.io/traefik/index.yaml" -Name "traefik" -TargetFolder $chartFolder
    #>
    param (
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$Url,
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$Name,
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$TargetFolder
    )

    if (-not (Get-Module -ListAvailable -Name powershell-yaml -ErrorAction:SilentlyContinue)) {
        if (-not (Get-PSRepository -Name PSGallery -ErrorAction:SilentlyContinue)) {
            Register-PSRepository -Default
        }
        Install-Module -Name powershell-yaml -Scope CurrentUser -Force
    }
    Import-Module powershell-yaml

    $chartYAML = Invoke-RestMethod -Uri $url
    Write-Host "##[warning] Converting Helm chart YAML to PowerShell readable format. This might take couple of minutes" -ForegroundColor Yellow
    $chart = $chartYAML | ConvertFrom-Yaml
    [array]$chartSorted = $chart.entries."$Name" | Sort-Object appVersion -Descending

    if (-NOT (Test-Path -Path $TargetFolder)) {
        New-Item -ItemType Directory -Path $TargetFolder
    }
    $tempFile = "$TargetFolder/helmChart.tgz"
    Invoke-WebRequest -Uri $chartSorted[0].urls[0] -OutFile $tempFile -Verbose
    tar -zxvf $tempFile -C "$TargetFolder" --strip 1
    Remove-Item -Path $tempFile -Force

    $chartSorted[0].version | Out-File  -FilePath "$TargetFolder/.version"
}

Function Export-K8s4uHelmChart {
    <#
    .SYNOPSIS
        Export manifests from Helm chart

    .PARAMETER ReleaseName
        Release name

    .PARAMETER Namespace
        Namespace name

    .PARAMETER ChartFolder
        Chart folder

    .PARAMETER ValuesFile
        Values file

    .PARAMETER TargetFolder
        Folder to exract Helm chart

    .EXAMPLE
        Export-K8s4uHelmChart -ReleaseName "traefik" -namespace "traefik" -ChartFolder $chartFolder -ValuesFile "./_helm-export/traefik/values.yaml" -TargetFolder "./base/traefik"
    #>
    param (
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$ReleaseName,
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$Namespace,
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$ChartFolder,
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$ValuesFile,
        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$TargetFolder
    )
    $version = Get-Content -Path "$ChartFolder\.version"
    if (-NOT (Test-Path -Path $TargetFolder)) {
        New-Item -ItemType Directory -Path $TargetFolder
    }

    $generated = helm template $ReleaseName $chartFolder --namespace $Namespace --values $ValuesFile --dependency-update --include-crds  | Where-Object {$_ -notlike "*helm.sh/chart*" -and $_ -notlike "*checksum/*"}
    $targetFile=""
    $fileHeader="# Generated by Export-HelmChart from chart version $version, DO NOT MODIFY`n"
    $fileContent=$fileHeader
    $i=0
    forEach($row in $generated) {
        $i++
        if ($row -like "---*") {
            continue
        }
        if ($row -like "*app.kubernetes.io/managed-by:*") {
            $newRow = $row -replace "Helm", "k8s4u-gitops-agent"
            $fileContent += "$newRow`n"
            continue
        }
        if ($row -like "# Source: *") {
            if ($targetFile -ne "") {
                $fileContent | Out-File $targetFile
                $fileContent=$fileHeader
            }
            $targetFileName= $row -replace '# Source: ','' -replace '/','-' -replace '-templates',''
            $targetFile = "$TargetFolder\generated-$targetFileName"
            continue
        }
        $fileContent += "$row`n"
    }
    $fileContent | Out-File $targetFile
}
